[cocos2dx_studio]
# create a target namespace (in javascript, this would create some code like the equiv. to `ns = ns || {}`)
# all classes will be embedded in that namespace
target_namespace = ccs

# what headers to parse
headers = %(cocosdir)s/cocos/editor-support/cocostudio/CocoStudio.h %(cocosdir)s/cocos/editor-support/cocostudio/CCComExtensionData.h %(cocosdir)s/cocos/scripting/lua-bindings/manual/cocostudio/lua-cocos-studio-conversions.h

# what classes to produce code for. You can use regular expressions here. When testing the regular
# expression, it will be enclosed in "^$", like this: "^Menu*$".
classes = Armature ArmatureAnimation Skin Bone ArmatureDataManager \w+Data$ ActionManagerEx ComAudio ComController ComAttribute ComRender BatchNode SceneReader GUIReader ActionObject Tween DisplayManager NodeReader ActionTimeline.* .*Frame$ Timeline ActionTimelineNode ComExtensionData BoneNode SkeletonNode

# what should we skip? in the format ClassName::[function function]
# ClassName is a regular expression, but will be used like this: "^ClassName$" functions are also
# regular expressions, they will not be surrounded by "^$". If you want to skip a whole class, just
# add a single "*" as functions. See bellow for several examples. A special class name is "*", which
# will apply to all class names. This is a convenience wildcard to be able to skip similar named
# functions from all classes.

skip =  *::[^visit$ copyWith.* onEnter.* onExit.* ^description$ getObjectType .*HSV onTouch.* (s|g)etUserObject add\w*EventListener],
        ArmatureDataManager::[CCArmatureDataManager ~CCArmatureDataManager],
        Armature::[createBone updateBlendType setBody getShapeList ^getBody$],
        Skin::[(s|g)etSkinData],
        ArmatureAnimation::[updateHandler updateFrameData frameEvent],
        Bone::[getIgnoreMovementBoneData],
        ActionManagerEx::[initWithDictionary initWithBinary],
        DisplayManager::[initDisplayList (s|g)etCurrentDecorativeDisplay getDecorativeDisplayByIndex],
        Tween::[(s|g)etMovementBoneData],
        GUIReader::[registerTypeAndCallBack storeFileDesignSize getFileDesignSize getParseCallBackMap getParseObjectMap],
        ActionNode::[initWithDictionary],
        ActionObject::[initWithDictionary initWithBinary],
        BaseData::[copy subtract],
        ActionTimelineCache::[loadActionTimelineFromXML loadAnimationWithDataBuffer createActionWithDataBuffer]

rename_functions =  ActionManagerEx::[shareManager=getInstance purgeActionManager=destroyInstance],
                    SceneReader::[purgeSceneReader=destroyInstance],
					ComAudio::[end=endToLua]

rename_classes =

# classes that create no constructor
# Set is special and we will use a hand-written constructor
abstract_classes = ArmatureDataManager ComAttribute ComRender ComAudio ActionManagerEx SceneReader GUIReader BatchNode ProcessBase
