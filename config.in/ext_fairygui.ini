[ext_fairygui]
# create a target namespace (in javascript, this would create some code like the equiv. to `ns = ns || {}`)
# all classes will be embedded in that namespace
target_namespace = fairygui

# what headers to parse
headers = %(cocosdir)s/cocos/editor-support/fairygui/FairyGUI.h

# what classes to produce code for. You can use regular expressions here. When testing the regular
# expression, it will be enclosed in "^$", like this: "^Menu*$".
classes = UIEventDispatcher GObject GImage GComponent GScrollBar GList GComboBox GButton GGroup GMovieClip GTextField GRichTextField GRoot GGraph EventContext UIPackage Transition InputEvent GController UIObjectFactory PopupMenu GSlider GTextInput Window GLoader GLoader3D GObjectPool ScrollPane GProgressBar DragDropManager UIConfig GLabel FUIInput FUISprite GBasicTextField InputProcessor HtmlObject PackageItem GTree GTreeNode TextFormat

# what should we skip? in the format ClassName::[function function]
# ClassName is a regular expression, but will be used like this: "^ClassName$" functions are also
# regular expressions, they will not be surrounded by "^$". If you want to skip a whole class, just
# add a single "*" as functions. See bellow for several examples. A special class name is "*", which
# will apply to all class names. This is a convenience wildcard to be able to skip similar named
# functions from all classes.

skip = 

rename_functions = 

rename_classes = 

# classes that create no constructor
# Set is special and we will use a hand-written constructor
abstract_classes = 
