[cocos2dx_3d]
# create a target namespace (in javascript, this would create some code like the equiv. to `ns = ns || {}`)
# all classes will be embedded in that namespace
target_namespace = cc

# what headers to parse
headers = %(cocosdir)s/cocos/cocos2d.h %(cocosdir)s/cocos/3d/CCBundle3D.h

# what classes to produce code for. You can use regular expressions here. When testing the regular
# expression, it will be enclosed in "^$", like this: "^Menu*$".
classes = AABB OBB Ray Animate3D Sprite3D Animation3D Skeleton3D ^Mesh$ AttachNode BillBoard Sprite3DCache TextureCube Skybox Terrain Bundle3D Sprite3DMaterial

# what should we skip? in the format ClassName::[function function]
# ClassName is a regular expression, but will be used like this: "^ClassName$" functions are also
# regular expressions, they will not be surrounded by "^$". If you want to skip a whole class, just
# add a single "*" as functions. See bellow for several examples. A special class name is "*", which
# will apply to all class names. This is a convenience wildcard to be able to skip similar named
# functions from all classes.

skip = Mesh::[create getAABB getVertexBuffer hasVertexAttrib getSkin getMeshIndexData getGLProgramState getPrimitiveType getIndexCount getIndexFormat getIndexBuffer getMeshCommand getDefaultGLProgram getTexture setTexture],
       Sprite3D::[getSkin getMeshArrayByName init initWithFile initFrom loadFromCache loadFromFile visit genGLProgramState createNode createAttachSprite3DNode createSprite3DNode getMeshIndexData addMesh onAABBDirty afterAsyncLoad],
       Skeleton3D::[create],
       Animation3D::[getBoneCurveByName getBoneCurves],
       Animate3D::[getKeyFrameUserInfo],
       BillBoard::[draw],
       Sprite3DCache::[addSprite3DData getSpriteData],
       Terrain::[lookForIndicesLODSkrit lookForIndicesLOD insertIndicesLOD insertIndicesLODSkirt getAABB getQuadTree],
       Bundle3D::[calculateAABB loadMeshDatas loadObj],
       Sprite3DMaterial::[setTexture]


rename_functions =

rename_classes = 

# classes that create no constructor
# Set is special and we will use a hand-written constructor
abstract_classes = Sprite3D
