[cocos2dx_extension]
# create a target namespace (in javascript, this would create some code like the equiv. to `ns = ns || {}`)
# all classes will be embedded in that namespace
target_namespace = cc

# what headers to parse
headers = %(cocosdir)s/extensions/cocos-ext.h

# what classes to produce code for. You can use regular expressions here. When testing the regular
# expression, it will be enclosed in "^$", like this: "^Menu*$".
classes = Control.* ControlButton.*  ScrollView$ TableView$ TableViewCell$ AssetsManager AssetsManagerEx Manifest EventAssetsManagerEx EventListenerAssetsManagerEx PUParticleSystem3D ParticleSystem3D ParticlePool

# what should we skip? in the format ClassName::[function function]
# ClassName is a regular expression, but will be used like this: "^ClassName$" functions are also
# regular expressions, they will not be surrounded by "^$". If you want to skip a whole class, just
# add a single "*" as functions. See bellow for several examples. A special class name is "*", which
# will apply to all class names. This is a convenience wildcard to be able to skip similar named
# functions from all classes.

skip =  .*Delegate::[*],
        .*Loader.*::[*],
        *::[^visit$ copyWith.* onEnter.* onExit.* ^description$ getObjectType (g|s)etDelegate .*HSV],
        EditBox::[(g|s)etDelegate ^keyboard.* touchDownAction getScriptEditBoxHandler registerScriptEditBoxHandler unregisterScriptEditBoxHandler],
        ControlUtils::[*],
        ControlSwitchSprite::[*],
        ScrollView::[(g|s)etDelegate$],
        TableView::[create (g|s)etDataSource$ (g|s)etDelegate],
        Manifest::[getAssets],
        EventListenerAssetsManagerEx::[create],
        PUParticleSystem3D::[getDerivedOrientation getEmittedEmitterParticlePool getEmittedSystemParticlePool getAffector getEmitter getObserver],
        ParticlePool::[getActiveParticleList createParticle getNext getFirst],
        ParticleSystem3D::[getAffector]


rename_functions =

rename_classes = 

# classes that create no constructor
# Set is special and we will use a hand-written constructor
abstract_classes = ArmatureDataManager Manifest
